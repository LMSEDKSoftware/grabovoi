import 'dart:convert';
import 'dart:io';

/// Script para probar inserci√≥n de datos completos
Future<void> main() async {
  print('üöÄ Probando inserci√≥n de datos completos...');
  
  // Configuraci√≥n de Supabase
  const String supabaseUrl = 'https://whtiazgcxdnemrrgjjqf.supabase.co';
  const String supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndodGlhemdjeGRuZW1ycmdqanFmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDUyMzYzOCwiZXhwIjoyMDc2MDk5NjM4fQ.LIVQ2FpXRpJD7ie4GVkrwU7lLPRm4S5NekNG2Cqme8o';
  
  try {
    // Crear datos completos de ejemplo
    final busquedaCompleta = {
      'codigo_buscado': '52183',
      'usuario_id': 'test-user-123',
      'prompt_system': 'Eres un experto en c√≥digos num√©ricos de Grigori Grabovoi. Tu tarea es analizar c√≥digos num√©ricos y proporcionar informaci√≥n √∫til. Responde SIEMPRE con un JSON v√°lido que contenga: {"nombre": "Nombre del c√≥digo", "descripcion": "Descripci√≥n detallada", "categoria": "Salud/Abundancia/Amor/Reprogramacion/Manifestacion"}. Si conoces el c√≥digo espec√≠fico, proporciona informaci√≥n detallada. Si no lo conoces espec√≠ficamente, analiza el patr√≥n num√©rico y proporciona una interpretaci√≥n basada en la numerolog√≠a de Grabovoi. NUNCA respondas con "null" o texto plano, siempre proporciona un JSON v√°lido con informaci√≥n √∫til.',
      'prompt_user': 'Analiza el c√≥digo num√©rico de Grabovoi: 52183. Si conoces este c√≥digo espec√≠fico, proporciona informaci√≥n detallada. Si no lo conoces, analiza el patr√≥n num√©rico y proporciona una interpretaci√≥n basada en los principios de Grabovoi sobre manifestaci√≥n, sanaci√≥n, transformaci√≥n y reprogramaci√≥n mental. Responde con un JSON v√°lido que contenga nombre, descripci√≥n y categor√≠a apropiada.',
      'respuesta_ia': '{"nombre": "Transformaci√≥n Personal Profunda", "descripcion": "C√≥digo num√©rico para la transformaci√≥n personal y el desarrollo del potencial interno. El patr√≥n 52183 activa la capacidad de manifestaci√≥n consciente y facilita el cambio de patrones mentales limitantes. Promueve la reprogramaci√≥n mental y la conexi√≥n con el prop√≥sito superior.", "categoria": "Reprogramacion"}',
      'codigo_encontrado': true,
      'codigo_guardado': true,
      'fecha_busqueda': DateTime.now().toIso8601String(),
      'duracion_ms': 2500,
      'modelo_ia': 'gpt-3.5-turbo',
      'tokens_usados': 150,
      'costo_estimado': 0.000225,
    };
    
    print('üìù Datos completos:');
    print('   C√≥digo: ${busquedaCompleta['codigo_buscado']}');
    print('   Usuario: ${busquedaCompleta['usuario_id']}');
    print('   Encontrado: ${busquedaCompleta['codigo_encontrado']}');
    print('   Guardado: ${busquedaCompleta['codigo_guardado']}');
    print('   Duraci√≥n: ${busquedaCompleta['duracion_ms']} ms');
    print('   Tokens: ${busquedaCompleta['tokens_usados']}');
    print('   Costo: \$${busquedaCompleta['costo_estimado']}');
    
    // Insertar datos
    final client = HttpClient();
    final request = await client.postUrl(Uri.parse('$supabaseUrl/rest/v1/busquedas_profundas'));
    
    request.headers.set('Content-Type', 'application/json');
    request.headers.set('apikey', supabaseKey);
    request.headers.set('Authorization', 'Bearer $supabaseKey');
    request.headers.set('Prefer', 'return=representation');
    
    final jsonData = jsonEncode(busquedaCompleta);
    request.write(jsonData);
    
    print('\nüåê Enviando datos completos...');
    final response = await request.close();
    final responseBody = await response.transform(utf8.decoder).join();
    
    print('üìä Respuesta:');
    print('   Status: ${response.statusCode}');
    print('   Body: $responseBody');
    
    if (response.statusCode == 201) {
      print('\n‚úÖ ¬°Datos insertados exitosamente!');
      
      // Consultar todos los datos
      print('\nüîç Consultando todos los registros...');
      await _consultarTodos(supabaseUrl, supabaseKey);
      
    } else {
      print('\n‚ùå Error al insertar datos');
    }
    
    client.close();
    
  } catch (e) {
    print('‚ùå Error: $e');
  }
}

Future<void> _consultarTodos(String supabaseUrl, String supabaseKey) async {
  try {
    final client = HttpClient();
    final request = await client.getUrl(Uri.parse('$supabaseUrl/rest/v1/busquedas_profundas?select=*&order=fecha_busqueda.desc'));
    
    request.headers.set('apikey', supabaseKey);
    request.headers.set('Authorization', 'Bearer $supabaseKey');
    
    final response = await request.close();
    final responseBody = await response.transform(utf8.decoder).join();
    
    if (response.statusCode == 200) {
      final data = jsonDecode(responseBody) as List;
      print('üìä Total de registros: ${data.length}');
      
      for (var item in data) {
        print('\nüìã Registro ${item['id']}:');
        print('   C√≥digo: ${item['codigo_buscado']}');
        print('   Usuario: ${item['usuario_id'] ?? 'N/A'}');
        print('   Fecha: ${item['fecha_busqueda']}');
        print('   Encontrado: ${item['codigo_encontrado'] ? "‚úÖ" : "‚ùå"}');
        print('   Guardado: ${item['codigo_guardado'] ? "‚úÖ" : "‚ùå"}');
        print('   Duraci√≥n: ${item['duracion_ms'] ?? 'N/A'} ms');
        print('   Tokens: ${item['tokens_usados'] ?? 'N/A'}');
        print('   Costo: \$${item['costo_estimado'] ?? 'N/A'}');
        if (item['respuesta_ia'] != null) {
          print('   Respuesta IA: ${item['respuesta_ia'].toString().substring(0, 100)}...');
        }
      }
    } else {
      print('‚ùå Error en consulta: ${response.statusCode}');
    }
    
    client.close();
    
  } catch (e) {
    print('‚ùå Error consultando: $e');
  }
}
