/// Servicio de IA simple basado en reglas
/// Sin NLP ni procesamiento de lenguaje natural
class AIService {
  /// Recomienda un c√≥digo basado en las categor√≠as usadas recientemente
  static String recomendarCodigo(List<String> categoriasUsadas) {
    if (categoriasUsadas.isEmpty) return '5197148'; // C√≥digo universal
    
    final ultimaCategoria = categoriasUsadas.last.toLowerCase();
    
    switch (ultimaCategoria) {
      case 'abundancia':
        return '318798'; // Prosperidad
      case 'salud':
        return '1884321'; // Norma Absoluta
      case 'protecci√≥n':
      case 'proteccion':
        return '71931'; // Campo energ√©tico
      case 'amor':
        return '888412'; // Amor Universal
      case 'sanaci√≥n':
      case 'sanacion':
        return '5432189'; // Regeneraci√≥n Celular
      default:
        return '5197148'; // Todo es posible
    }
  }

  /// Sugiere c√≥digos complementarios basados en la categor√≠a actual
  static List<String> sugerirCodigosComplementarios(String categoria) {
    switch (categoria.toLowerCase()) {
      case 'abundancia':
        return ['520741', '71427321893']; // √âxito y Dinero inesperado
      case 'salud':
        return ['5432189', '8142543']; // Regeneraci√≥n y Sistema inmune
      case 'protecci√≥n':
      case 'proteccion':
        return ['9187756981818', '71427321893']; // Protecci√≥n general y hogar
      default:
        return ['1888948', '741']; // Armon√≠a universal y Sanaci√≥n
    }
  }

  /// Calcula el nivel energ√©tico basado en la frecuencia de uso
  static int calcularNivelEnergetico(int diasConsecutivos, int totalPilotajes) {
    int nivel = 1;
    
    // Por d√≠as consecutivos
    if (diasConsecutivos >= 21) nivel += 3;
    else if (diasConsecutivos >= 14) nivel += 2;
    else if (diasConsecutivos >= 7) nivel += 1;
    
    // Por total de pilotajes
    if (totalPilotajes >= 100) nivel += 2;
    else if (totalPilotajes >= 50) nivel += 1;
    
    return nivel.clamp(1, 10);
  }

  /// Recomienda un desaf√≠o basado en el historial del usuario
  static String recomendarDesafio(
    List<String> categoriasUsadas,
    int diasConsecutivos,
  ) {
    if (diasConsecutivos == 0) {
      return 'Desaf√≠o de Abundancia'; // Empezar con algo motivador
    }
    
    if (diasConsecutivos >= 7 && diasConsecutivos < 14) {
      return 'Camino de Sanaci√≥n'; // Usuario constante, subir nivel
    }
    
    if (diasConsecutivos >= 14) {
      return 'Transformaci√≥n Total'; // Usuario avanzado
    }
    
    // Basado en categor√≠a m√°s usada
    final Map<String, int> frecuenciaCategoria = {};
    for (var cat in categoriasUsadas) {
      frecuenciaCategoria[cat] = (frecuenciaCategoria[cat] ?? 0) + 1;
    }
    
    if (frecuenciaCategoria['Abundancia'] != null &&
        frecuenciaCategoria['Abundancia']! > 3) {
      return 'Desaf√≠o de Abundancia';
    }
    
    return 'Camino de Sanaci√≥n'; // Default
  }

  /// Genera una frase motivacional basada en el progreso
  static String generarFraseMotivacional(int nivel, int diasConsecutivos) {
    if (diasConsecutivos >= 21) {
      return '‚ú® Tu energ√≠a vibra en frecuencias elevadas. ¬°Eres imparable!';
    } else if (diasConsecutivos >= 14) {
      return 'üåü Tu constancia est√° manifestando resultados poderosos.';
    } else if (diasConsecutivos >= 7) {
      return 'üí´ Una semana de conexi√≥n consciente. ¬°Contin√∫a el camino!';
    } else if (diasConsecutivos >= 3) {
      return 'üîÆ La energ√≠a fluye contigo. Cada d√≠a es m√°s poderoso.';
    } else {
      return 'üåô El viaje de mil millas comienza con un solo paso.';
    }
  }

  /// Analiza patrones de uso y sugiere pr√≥ximos pasos
  static Map<String, dynamic> analizarPatrones({
    required List<String> categoriasUsadas,
    required int diasConsecutivos,
    required int totalPilotajes,
  }) {
    final nivel = calcularNivelEnergetico(diasConsecutivos, totalPilotajes);
    final codigoRecomendado = recomendarCodigo(categoriasUsadas);
    final desafioSugerido = recomendarDesafio(categoriasUsadas, diasConsecutivos);
    final frase = generarFraseMotivacional(nivel, diasConsecutivos);
    
    return {
      'nivel': nivel,
      'codigoRecomendado': codigoRecomendado,
      'desafioSugerido': desafioSugerido,
      'fraseMotivacional': frase,
      'proximoPaso': _determinarProximoPaso(diasConsecutivos, totalPilotajes),
    };
  }

  static String _determinarProximoPaso(int diasConsecutivos, int totalPilotajes) {
    if (diasConsecutivos == 0) {
      return 'Realiza tu primer pilotaje consciente hoy';
    } else if (diasConsecutivos < 7) {
      return 'Completa 7 d√≠as consecutivos para desbloquear el primer nivel';
    } else if (diasConsecutivos < 21) {
      return 'Contin√∫a hasta 21 d√≠as para una transformaci√≥n profunda';
    } else {
      return 'Comparte tu luz con la comunidad';
    }
  }
}

